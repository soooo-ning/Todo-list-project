<!DOCTYPE html>
<html lang="en">
  <%- include('include/header', { title: 'calendar' }) %>
  <script
    defer
    src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"
  ></script>
  <body>
    <!-- Navigation -->
    <nav class="nav"><%- include('include/navi') %></nav>

    <!-- Main Content -->
    <main class="container calendar_wrap">
      <div class="content">
        <!-- Calendar Section -->
        <div class="calendar">
          <div class="header">
            <button id="prevMonth">&lt;</button>
            <h2 id="monthYear"></h2>
            <button id="nextMonth">&gt;</button>
          </div>
          <div class="days">
            <div>일</div>
            <div>월</div>
            <div>화</div>
            <div>수</div>
            <div>목</div>
            <div>금</div>
            <div>토</div>
          </div>
          <div class="dates" id="dates"></div>
        </div>

        <!-- Todo List Section -->
        <div class="todo-list">
          <h2>스케줄:</h2>
          <h3 id="selected-date"></h3>
          <ul id="todo-items"></ul>
        </div>
      </div>
    </main>

    <%- include('include/write-popup') %> <%- include('include/detail-popup') %>

    <script>
      const monthYear = document.getElementById('monthYear');
      const datesContainer = document.getElementById('dates');
      const prevMonth = document.getElementById('prevMonth');
      const nextMonth = document.getElementById('nextMonth');

      let currentDate = new Date();
      let monthTodos = [];

      async function renderCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        monthYear.textContent = `${currentDate.toLocaleString('default', {
          month: 'long',
        })} ${year}`;

        const formattedMonth = String(month + 1).padStart(2, '0');
        const dateStr = `${year}-${formattedMonth}-01`;
        await fetchMonthTodos(dateStr);

        const firstDay = new Date(year, month, 1).getDay();
        const lastDate = new Date(year, month + 1, 0).getDate();

        datesContainer.innerHTML = '';

        for (let i = 0; i < firstDay; i++) {
          const emptyDiv = document.createElement('div');
          datesContainer.appendChild(emptyDiv);
        }

        for (let i = 1; i <= lastDate; i++) {
          const dateDiv = document.createElement('div');
          dateDiv.classList.add('date');
          dateDiv.textContent = i;
          dateDiv.addEventListener('click', () =>
            selectDate(year, month + 1, i),
          );

          const formattedDay = String(i).padStart(2, '0');
          const formattedMonth = String(month + 1).padStart(2, '0');
          const dateKey = `${year}-${formattedMonth}-${formattedDay}`;
          const todosForDate = monthTodos.filter(
            (todo) => todo.date.split('T')[0] === dateKey,
          );

          if (todosForDate.length > 0) {
            dateDiv.classList.add('bg');
            if (
              window.matchMedia &&
              window.matchMedia('(prefers-color-scheme: dark)').matches
            ) {
              // 다크 모드
              dateDiv.style.backgroundColor = '#ffffff';
              dateDiv.style.color = '#000000';
            } else {
              // 라이트 모드
              dateDiv.style.backgroundColor = '#e7c6ff5b';
            }
          }

          datesContainer.appendChild(dateDiv);
        }
      }

      async function fetchMonthTodos(dateStr) {
        try {
          console.log('Fetching todos for date:', dateStr);
          const response = await fetch(`/todo/api/day?date=${dateStr}`);
          const result = await response.json();
          console.log('API Response:', result);

          if (result.status === 'success') {
            monthTodos = result.data;
          } else {
            console.error('Failed to fetch todos:', result.message);
            monthTodos = [];
          }
        } catch (error) {
          console.error('Error fetching todos:', error);
          monthTodos = [];
        }
      }

      function selectDate(year, month, day) {
        const formattedMonth = String(month).padStart(2, '0');
        const formattedDay = String(day).padStart(2, '0');
        const dateKey = `${year}-${formattedMonth}-${formattedDay}`;

        const selectedDate = `${year}년 ${month}월 ${day}일`;
        document.getElementById('selected-date').textContent = selectedDate;

        const todoItems = document.getElementById('todo-items');
        todoItems.innerHTML = '';

        console.log('Date Key:', dateKey);
        console.log('Month Todos:', monthTodos);

        const todosForDate = monthTodos.filter(
          (todo) => todo.date.split('T')[0] === dateKey,
        );

        todosForDate.forEach((todo) => {
          const li = document.createElement('li');
          li.classList.add('todo-item'); // 스타일링을 위한 클래스 추가

          // a 태그 대신 div로 변경하고 클릭 이벤트 추가
          const todoTitle = document.createElement('div');
          todoTitle.style.cursor = 'pointer'; // 클릭 가능함을 표시
          todoTitle.textContent =
            todo.title ||
            (todo.TodoContents && todo.TodoContents[0]?.content) ||
            '제목 없음';

          // 클릭 이벤트에 getTodo 함수 연결
          todoTitle.onclick = (e) => {
            e.preventDefault(); // 기본 이벤트 방지
            e.stopPropagation(); // 이벤트 전파 방지
            getTodo(todo.id);
          };

          li.appendChild(todoTitle);
          todoItems.appendChild(li);
        });
      }

      prevMonth.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
      });

      nextMonth.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
      });

      renderCalendar();
    </script>
  </body>
</html>
