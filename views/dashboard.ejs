<!DOCTYPE html>
<html lang="en">
  <%- include('include/header', { title: 'dashboard' })%>
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.12/css/weather-icons.min.css"
  />

  <body>
    <!-- 네비게이션 부분 -->
    <nav class="nav"><%- include('include/navi') %></nav>

    <main class="container dashboard_wrap">
      <div class="content">
        <section class="container-fluid">
          <header>
            <!-- 로고 -->
            <h1 class="main_title">Todo Checkk</h1>
          </header>

          <!-- 진행 상태 -->
          <div class="summary card custom-progress text-black">
            <div class="card-body">
              <p class="card-title">
                이번주 투두 상황 <span id="allprogress"></span>
              </p>
              <div class="progress-container">
                <div class="progress">
                  <div
                    id="allProgressBar"
                    class="progress-bar progress-bar-custom progress-bar-animated"
                    role="progressbar"
                    style="width: 50%"
                  >
                    50%
                  </div>
                </div>
              </div>

              <!-- 오늘의 투두 현황 -->
              <p class="card-title">
                오늘의 투두 상황 <span id="allprogress"></span>
              </p>
              <div class="progress">
                <div
                  id="todayProgressBar"
                  class="progress-bar progress-bar-custom progress-bar-animated"
                  role="progressbar"
                  style="width: 0%"
                >
                  0%
                </div>
              </div>
            </div>
          </div>

          <!-- 오늘의 할 일 -->
          <form action="today-todo">
            <div class="card bg-light">
              <div class="card-body">
                <div class="flex_wrap sb">
                  <h5 class="card-title mb0">오늘의 할일</h5>
                  <button type="button" class="btn btn-outline-danger btn-sm">
                    추가
                  </button>
                </div>
                <ul id="todayTodos" class="flex_wrap mt20">
                  <!-- 동적으로 추가될 부분 -->
                </ul>
              </div>
            </div>
          </form>

          <!-- 이번주 할 일 -->
          <div class="card-body">
            <h5 class="card-title">이번주 할 일</h5>
            <table class="table w100">
              <thead>
                <tr>
                  <th>요일</th>
                  <th>할 일</th>
                </tr>
              </thead>
              <tbody id="weekTodos">
                <!--데이터를 채울 부분 -->
              </tbody>
            </table>
          </div>

          <!-- 날씨 -->
          <div class="card-body">
            <h5 class="card-title">서울 날씨</h5>
            <div class="weather-container">
              <div id="temperature">기온: 로딩 중...</div>
              <div id="weather">날씨: 로딩 중...</div>
              <i class="wi wi-day-sunny weather-icon"></i>
            </div>
          </div>

          <!-- 우선순위 -->
          <div class="card-body">
            <div class="flex_wrap sb">
              <h5 class="card-title">우선순위</h5>
              <div class="priority">
                <p>우선순위</p>
                <button
                  type="button"
                  class="high btn-outline-danger btn-sm"
                  onclick="fetchPriorityTodos('high')"
                >
                  상
                </button>
                <button
                  type="button"
                  class="medium btn-outline-danger btn-sm"
                  onclick="fetchPriorityTodos('medium')"
                >
                  중
                </button>
                <button
                  type="button"
                  class="low btn-outline-danger btn-sm"
                  onclick="fetchPriorityTodos('low')"
                >
                  하
                </button>
              </div>
            </div>
            <div id="todos"></div>
          </div>
        </section>
      </div>
    </main>

    <%- include('include/write-popup') %> <%- include('include/detail-popup') %>

    <script>
      window.handleTodoClick = async function (todoId) {
        if (!todoId) {
          console.error('Todo ID is required');
          return;
        }

        console.log('Todo ID:', todoId);

        try {
          const response = await axios.get(`/todo/api/get/${todoId}`);
          console.log('전체 응답:', response.data);

          if (!response.data || !response.data.data) {
            throw new Error('Invalid response data');
          }

          const todo = response.data.data;
          const detailPopup = document.querySelector('.detail-popup');
          if (!detailPopup) {
            console.error('Detail popup element not found');
            return;
          }

          const detailForm = document.forms['form-todo-detail'];

          // 기본 데이터 설정
          detailForm.querySelector('input[name="todoTitle"]').value =
            todo.title || '';
          detailForm.querySelector('input[name="todoDate"]').value =
            todo.date || '';

          // 우선순위 설정
          const priorityInput = detailForm.querySelector(
            `input[name="priority"][value="${todo.priority}"]`,
          );
          if (priorityInput) {
            priorityInput.checked = true;
          }

          // 키워드 설정
          const keywordSelect = detailForm.querySelector(
            'select[name="todoKey"]',
          );
          if (keywordSelect && todo.keyword_id) {
            keywordSelect.value = todo.keyword_id;
          }

          // Todo 내용 설정
          const todoContentList = detailForm.querySelector('.todo_content');
          todoContentList.innerHTML = '';

          if (todo.todo_contents && todo.todo_contents.length > 0) {
            todo.todo_contents.forEach((content) => {
              const li = document.createElement('li');
              li.dataset.contentId = content.id;
              li.innerHTML = `
                      <input type="checkbox" ${
                        content.state ? 'checked' : ''
                      } disabled>
                      <input type="text" name="todoCon" value="${
                        content.content || ''
                      }" disabled>
                    `;
              todoContentList.appendChild(li);
            });
          } else {
            const li = document.createElement('li');
            li.innerHTML = `
                    <input type="checkbox" disabled>
                    <input type="text" name="todoCon" value="내용 없음" disabled>
                  `;
            todoContentList.appendChild(li);
          }

          // 팝업 표시
          detailPopup.classList.add('on');
          document.querySelector('body').classList.add('pop_open');
        } catch (error) {
          console.error('Error fetching todo:', error);
          alert('Todo를 불러오는 중 오류가 발생했습니다.');
        }
      };

      document.addEventListener('DOMContentLoaded', () => {
        const fetchTodayTodos = () => {
          fetch('/todo/api/today')
            .then((response) => response.json())
            .then((response) => {
              const todayTodos = response.data || [];
              const todoList = document.getElementById('todayTodos');

              if (!todoList) {
                console.error('todoList element not found');
                return;
              }

              todoList.innerHTML = '';

              if (todayTodos.length === 0) {
                todoList.innerHTML = '<li>오늘의 할 일이 없습니다.</li>';
                return;
              }

              todayTodos.forEach((todo) => {
                const todoContentsHtml = todo.todo_contents
                  ? todo.todo_contents
                      .map(
                        (content) => `
                              <div class="todo-content ${
                                content.state ? 'completed' : 'incomplete'
                              }">
                                <span class="content-text">${
                                  content.content
                                }</span>
                                <span class="state-badge ${
                                  content.state ? 'completed' : 'incomplete'
                                }">
                                  ${content.state ? '완료' : '미완료'}
                                </span>
                              </div>
                            `,
                      )
                      .join('')
                  : '<div class="todo-content">내용 없음</div>';

                const listItem = document.createElement('li');
                listItem.innerHTML = `
                        <div class="todo-item" data-todo-id="${
                          todo.id
                        }" style="cursor: pointer;">
                          <h6 class="todo-title">${
                            todo.title || '제목 없음'
                          }</h6>
                          <div class="todo-contents">
                            ${todoContentsHtml}
                          </div>
                        </div>
                      `;

                listItem
                  .querySelector('.todo-item')
                  .addEventListener('click', (e) => {
                    const todoId = e.currentTarget.dataset.todoId;
                    if (todoId) {
                      handleTodoClick(todoId);
                    }
                  });

                todoList.appendChild(listItem);
              });
            })
            .catch((error) => {
              console.error('오류:', error);
              alert('오늘의 할 일을 불러오는 중 오류가 발생했습니다.');
            });
        };

        // 이번주 할 일
        const fetchWeeklyTodos = () => {
          const days = [
            '일요일',
            '월요일',
            '화요일',
            '수요일',
            '목요일',
            '금요일',
            '토요일',
          ];

          fetch('/todo/api/week')
            .then((response) => {
              if (!response.ok)
                throw new Error('이번주 할 일을 불러오는 데 실패했습니다.');
              return response.json();
            })
            .then((response) => {
              console.log('Weekly todos response:', response.data); // 원본 데이터 확인
              const weeklyTodos = response.data || [];
              const tableBody = document.getElementById('weekTodos');

              if (!tableBody) return;

              tableBody.innerHTML = '';

              // 날짜별로 할 일 그룹화 - todo 객체 전체를 보존
              const groupedTodos = weeklyTodos.reduce((acc, todo) => {
                console.log('Processing todo:', todo); // 각 todo 객체 확인
                const dateKey = new Date(todo.date).toDateString();
                if (!acc[dateKey]) {
                  acc[dateKey] = {
                    date: new Date(todo.date),
                    todos: [],
                  };
                }
                // todo 객체 전체를 보존하여 push
                acc[dateKey].todos.push({
                  id: todo.id, // id 명시적 포함
                  title: todo.title,
                  date: todo.date,
                  // 기타 필요한 필드들도 포함
                });
                return acc;
              }, {});

              // 그룹화된 데이터를 날짜순으로 정렬하여 표시
              Object.values(groupedTodos)
                .sort((a, b) => a.date - b.date)
                .forEach(({ date, todos }) => {
                  const row = document.createElement('tr');

                  const dayCell = document.createElement('td');
                  dayCell.style.verticalAlign = 'top';
                  dayCell.textContent = `${
                    date.getMonth() + 1
                  }월 ${date.getDate()}일 (${days[date.getDay()]})`;
                  row.appendChild(dayCell);

                  const taskCell = document.createElement('td');
                  taskCell.innerHTML = todos
                    .map((todo) => {
                      console.log('Creating todo item:', todo); // todo 객체 확인
                      return `<div class="todo-item" data-todo-id="${
                        todo.id
                      }" data-todo-title="${todo.title}">${
                        todo.title || '할 일 없음'
                      }</div>`;
                    })
                    .join('');
                  row.appendChild(taskCell);

                  tableBody.appendChild(row);
                });

              // 각 투두 항목에 클릭 이벤트 추가
              tableBody.querySelectorAll('.todo-item').forEach((item) => {
                item.addEventListener('click', () => {
                  const todoId = item.dataset.todoId;
                  console.log('클릭된 todo 항목:', item); // 클릭된 요소 확인
                  console.log('클릭된 todoId:', todoId); // todoId 확인
                  if (todoId && todoId !== 'undefined') {
                    handleTodoClick(todoId);
                  } else {
                    console.error('Todo ID is missing or invalid:', item);
                  }
                });
              });
            })
            .catch((error) => {
              console.error('오류:', error);
              alert('이번주 할 일을 불러오는 중 오류가 발생했습니다.');
            });
        };

        // 우선순위별 할 일 가져오기
        window.fetchPriorityTodos = (priority) => {
          const todosContainer = document.getElementById('todos');
          if (!todosContainer) return;

          fetch(`/todo/api/priority/${priority}`)
            .then((response) => {
              if (!response.ok)
                throw new Error('우선순위별 할 일을 불러오는 데 실패했습니다.');
              return response.json();
            })
            .then((response) => {
              const todos = response.data || [];
              todosContainer.innerHTML = '';

              if (todos.length === 0) {
                todosContainer.innerHTML = `<p>${priority} 우선순위에 해당하는 할 일이 없습니다.</p>`;
                return;
              }

              const list = document.createElement('ul');
              list.className = 'priority-todos';

              todos.forEach((todo) => {
                const listItem = document.createElement('li');
                listItem.innerHTML = `
                  <div class="todo-item" data-todo-id="${todo.id}">
                    <strong>제목:</strong> ${todo.title || '제목 없음'}<br>
                    <strong>날짜:</strong> ${new Date(
                      todo.date,
                    ).toLocaleDateString()}<br>
                    <strong>내용:</strong> ${
                      todo.todo_contents && todo.todo_contents.length > 0
                        ? todo.todo_contents
                            .map((content) => content.content)
                            .join(', ')
                        : '내용 없음'
                    }
                  </div>
                `;
                listItem
                  .querySelector('.todo-item')
                  .addEventListener('click', () => {
                    handleTodoClick(todo.id); // 투두 클릭 시 상세 조회
                  });
                list.appendChild(listItem);
              });

              todosContainer.appendChild(list);
            })
            .catch((error) => {
              console.error('오류:', error);
              todosContainer.innerHTML =
                '<p>우선순위별 할 일을 불러오는 중 오류가 발생했습니다.</p>';
            });
        };

        // 날씨 API
        const fetchWeather = async () => {
          const apiKey = 'da450c832635d5d57538d8acdd43e25f';
          const weatherContainer = document.querySelector('.weather-container');

          try {
            const response = await fetch(
              `https://api.openweathermap.org/data/2.5/weather?q=Seoul&units=metric&lang=kr&appid=${apiKey}`,
            );
            if (!response.ok)
              throw new Error('날씨 정보를 불러오지 못했습니다.');

            const data = await response.json();
            weatherContainer.innerHTML = `
              <h2>${data.name}</h2>
              <p>온도: ${data.main.temp}°C</p>
              <p>상태: ${data.weather[0].description}</p>
              <img src="https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png" />
            `;
          } catch (error) {
            weatherContainer.innerHTML = `<p>오류: ${error.message}</p>`;
          }
        };

        // 초기 데이터 로드
        fetchTodayTodos();
        fetchWeeklyTodos();
        fetchPriorityTodos('high'); // 페이지 로드 시 '상' 우선순위 데이터 로드
        fetchWeather();
      });
    </script>
  </body>
</html>
