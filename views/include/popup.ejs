<div class="container popup">
  <div class="pop_con">
    <h3 class="sub_title">
      <span>Write your TodoList</span>
    </h3>
    <button type="button" class="pop_close">X</button>
    <form name="form-todo" method="post">
      <label class="todo_title">
        <input
          type="text"
          name="todoTitle"
          placeholder="제목을 입력하세요"
          required
        />
      </label>

      <div class="todo_input">
        <label class="calendar_input">
          <input
            type="text"
            id="datetime-input"
            name="todoDate"
            placeholder="날짜를 입력하세요"
            readonly
          />
          <div class="calendar_pop" style="display: none"></div>
        </label>

        <div class="priority">
          <p>우선순위</p>
          <label>
            <input type="radio" name="priority" value="high" />
            상
          </label>
          <label>
            <input type="radio" name="priority" value="medium" />
            중
          </label>
          <label>
            <input type="radio" name="priority" value="low" />
            하
          </label>
        </div>

        <label class="todo_key">
          <p>키워드</p>
          <select name="todoKey" id="">
            <% if (keywords && keywords.length > 0) { %> <% for (let i = 0; i <
            keywords.length; i++) { %>
            <option value="<%= keywords[i].id %>">
              <%= keywords[i].keyword %>
            </option>
            <% } %> <% } else { %>
            <option value="">키워드 선택 안함</option>
            <% } %>
          </select>
        </label>
      </div>

      <ul class="todo_content">
        <li>
          <label>
            <input type="checkbox" name="todoChk" />
            <input type="text" name="todoCon" placeholder="할일을 입력하세요" />
            <input type="button" value="delete" />
          </label>
        </li>
      </ul>

      <button type="button" id="todoAdd">추가</button>
      <button type="button" id="todoEdit">수정</button>
      <button type="submit" id="todoBtn">등록</button>
    </form>
  </div>
</div>

<script>
  /* === todo write === */
  /* 달력 날짜 지정 */
  document.addEventListener('DOMContentLoaded', () => {
    const datetimeInput = document.getElementById('datetime-input');
    const calendar = document.querySelector('.calendar_pop');

    if (!datetimeInput || !calendar) {
      console.error('Required DOM elements are missing.');
      return;
    }

    let selectedDate = null;
    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth();

    // 캘린더 클릭 이벤트
    calendar.addEventListener('click', (e) => {
      e.stopPropagation(); // 클릭 이벤트 전파 중지

      const target = e.target;
      if (target.tagName === 'TD' && !target.classList.contains('disabled')) {
        selectedDate = target.dataset.date;
        highlightSelectedDate(target);
        updateInputValue();

        // 캘린더 닫기
        calendar.style.display = 'none';
      }
    });

    // 입력 필드 클릭 시 캘린더 열기
    datetimeInput.addEventListener('click', (e) => {
      e.stopPropagation(); // 클릭 이벤트 전파 중지

      calendar.innerHTML = generateCalendarHTML(currentMonth, currentYear);
      calendar.style.display = 'block';
    });

    // 외부 클릭 시 캘린더 닫기
    document.addEventListener('click', (e) => {
      if (!calendar.contains(e.target) && e.target !== datetimeInput) {
        calendar.style.display = 'none';
      }
    });

    function generateCalendarHTML(month, year) {
      const daysInMonth = new Date(year, month + 1, 0).getDate();
      const firstDay = new Date(year, month, 1).getDay();
      const monthNames = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
      ];

      let html = `<div><strong>${monthNames[month]} ${year}</strong></div>`;
      html += '<table><tr>';
      ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].forEach((day) => {
        html += `<th>${day}</th>`;
      });
      html += '</tr><tr>';

      for (let i = 0; i < firstDay; i++) {
        html += '<td></td>';
      }

      for (let day = 1; day <= daysInMonth; day++) {
        const dateString = `${year}-${String(month + 1).padStart(
          2,
          '0',
        )}-${String(day).padStart(2, '0')}`;
        const date = new Date(dateString);

        const isDisabled = date < today.setHours(0, 0, 0, 0) ? 'disabled' : '';
        html += `<td data-date="${dateString}" class="${isDisabled}">${day}</td>`;

        if ((day + firstDay) % 7 === 0) {
          html += '</tr><tr>';
        }
      }

      html += '</tr></table>';
      return html;
    }

    function updateInputValue() {
      if (selectedDate) {
        datetimeInput.value = selectedDate;
      }
    }

    function highlightSelectedDate(target) {
      const allDates = calendar.querySelectorAll('td');
      allDates.forEach((td) => td.classList.remove('selected'));
      target.classList.add('selected');
    }
  });

  /*add버튼 클릭시 할일input 하나씩 추가*/
  document.addEventListener('DOMContentLoaded', () => {
    const todoAddButton = document.getElementById('todoAdd');
    const todoContentList = document.querySelector('.todo_content');

    // 할 일 추가 기능
    todoAddButton.addEventListener('click', () => {
      // 새로운 <li> 요소 생성
      const newListItem = document.createElement('li');
      const newLabel = document.createElement('label');

      // 체크박스 생성
      const newCheckbox = document.createElement('input');
      newCheckbox.type = 'checkbox';
      newCheckbox.name = 'todoChk';

      // 텍스트 입력 필드 생성
      const newTextInput = document.createElement('input');
      newTextInput.type = 'text';
      newTextInput.name = 'todoCon';
      newTextInput.placeholder = '할일을 입력하세요';

      // 삭제 버튼 생성
      const deleteButton = document.createElement('input');
      deleteButton.type = 'button';
      deleteButton.value = 'delete';

      // 삭제 버튼 클릭 이벤트 추가
      deleteButton.addEventListener('click', () => {
        newListItem.remove(); // 부모 <li> 삭제
        updateDeleteButtons(); // 삭제 버튼 상태 업데이트
      });

      // <label>에 요소 추가
      newLabel.appendChild(newCheckbox);
      newLabel.appendChild(newTextInput);
      newLabel.appendChild(deleteButton);

      // <li>에 <label> 추가
      newListItem.appendChild(newLabel);

      // .todo_content에 새 <li> 추가
      todoContentList.appendChild(newListItem);

      // 삭제 버튼 상태 업데이트
      updateDeleteButtons();
    });

    // 삭제 버튼 상태 업데이트 함수
    function updateDeleteButtons() {
      const listItems = todoContentList.querySelectorAll('li');
      listItems.forEach((li, index) => {
        const deleteButton = li.querySelector('input[type="button"]');
        if (listItems.length === 1) {
          // 하나만 남아 있으면 삭제 버튼 숨김
          deleteButton.style.display = 'none';
        } else {
          // 두 개 이상이면 삭제 버튼 보임
          deleteButton.style.display = 'inline-block';
        }
      });
    }

    // 초기 삭제 버튼 상태 설정
    updateDeleteButtons();

    // 기존 삭제 버튼 이벤트 (초기 HTML에 있는 요소)
    todoContentList.addEventListener('click', (e) => {
      if (e.target.type === 'button' && e.target.value === 'delete') {
        const listItem = e.target.closest('li'); // 부모 <li> 찾기
        if (listItem) {
          listItem.remove(); // <li> 삭제
          updateDeleteButtons(); // 삭제 버튼 상태 업데이트
        }
      }
    });
  });

  /* == popup == */
  const pop = document.querySelector('.popup');
  const popBtn = document.querySelector('.pop_btn');
  const popClose = document.querySelector('.pop_close');
  popBtn.addEventListener('click', () => {
    pop.classList.add('on');
    document.querySelector('body').classList.add('pop_open');
  });
  popClose.addEventListener('click', () => {
    pop.classList.remove('on');
    document.querySelector('body').classList.remove('pop_open');
  });

  /*api 부르기*/
  const todoForm = document.forms['form-todo']; // 폼 요소

  // 버튼 요소
  const todoEditBtn = document.getElementById('todoEdit');
  const todoSubmitBtn = document.getElementById('todoBtn');

  // 기본적으로 등록 버튼만 보이게 설정
  todoEditBtn.style.display = 'none'; // 수정 버튼 숨기기

  // 등록 버튼 클릭 시 처리
  todoSubmitBtn.addEventListener('click', (event) => {
    event.preventDefault();
    // 폼 데이터 가져오기
    const todoTitle = document
      .querySelector("input[name='todoTitle']")
      .value.trim();
    const todoDate = document
      .querySelector("input[name='todoDate']")
      .value.trim();
    const todoPriority = document.querySelector("input[name='priority']").value;
    const todoKey =
      document.querySelector("select[name='todoKey']").value || null;
    const todoContents = [
      ...todoForm.querySelectorAll('.todo_content input[name="todoCon"]'),
    ].map((input) => input.value.trim());

    if (!todoTitle || !todoDate || !todoPriority) {
      alert('모든 필드를 채워주세요.');
      return;
    }

    // POST 요청: 새 투두 추가
    axios
      .post('/todo/api/write', {
        user_id: 1,
        keyword_id: todoKey,
        title: todoTitle,
        priority: todoPriority,
        date: todoDate,
        content: todoContents, // 배열로 전송
      })
      .then((response) => {
        alert(response.data.message);
        window.location.reload();
      })
      .catch((error) => {
        console.error(error);
        alert('투두 추가 중 오류가 발생했습니다.');
      });
  });

  // 모든 입력 필드에서 엔터 키로 이동 처리
  // 각 인풋 필드를 배열로 저장
  // const inputs = document.querySelectorAll('input');

  // // 'Enter' 키가 눌렸을 때 포커스를 다음 인풋으로 이동시키는 함수
  // inputs.forEach((input, index) => {
  //   input.addEventListener('keydown', function (event) {
  //     if (event.key === 'Enter') {
  //       event.preventDefault(); // Enter 키의 기본 동작(폼 제출)을 막음
  //       if (inputs[index + 1]) {
  //         inputs[index + 1].focus(); // 다음 인풋으로 포커스를 이동
  //       }
  //     }
  //   });
  // });
  // const allInputs = document.querySelectorAll(
  //   "input[name='todoTitle'], input[name='todoDate'], input[name='priority'], .todo_content input[name='todoCon']",
  // );
  // allInputs.forEach((input, index) => {
  //   input.addEventListener('keydown', (event) => {
  //     if (event.key === 'Enter') {
  //       event.preventDefault(); // 기본 엔터 키 동작 방지
  //       const nextInput = allInputs[index + 1];
  //       if (nextInput) {
  //         nextInput.focus(); // 다음 필드로 포커스 이동
  //       } else {
  //         todoSubmitBtn.focus(); // 마지막 필드에서는 등록 버튼에 포커스
  //       }
  //     }
  //   });
  // });

  // 수정 버튼 클릭 시 처리
  todoEditBtn.addEventListener('click', (event) => {
    event.preventDefault();
    // 폼 데이터 가져오기
    const todoTitle = document
      .querySelector("input[name='todoTitle']")
      .value.trim();
    const todoDate = document
      .querySelector("input[name='todoDate']")
      .value.trim();
    const todoPriority = document.querySelector("input[name='priority']").value;
    const todoKey =
      document.querySelector("select[name='todoKey']").value || null;
    const todoContents = [
      ...todoForm.querySelectorAll('.todo_content input[name="todoCon"]'),
    ].map((input) => input.value.trim());

    if (!todoTitle || !todoDate || !todoPriority) {
      alert('모든 필드를 채워주세요.');
      return;
    }

    // POST 요청: 기존 투두 수정
    axios
      .post(
        '/todo/api/write',
        {
          user_id: 1, // 예시 user_id, 실제로는 로그인된 사용자 ID로 변경
          keyword_id: todoKey,
          title: todoTitle,
          priority: todoPriority,
          date: todoDate,
          content: todoContents,
        },
        {
          headers: {
            'Content-Type': 'application/json', // 요청 타입을 JSON으로 설정
          },
        },
      )
      .then((response) => {
        alert(response.data.message);
        window.location.reload(); // 투두 목록 갱신
      })
      .catch((error) => {
        console.error(error);
        alert('투두 추가 중 오류가 발생했습니다.');
      });
  });

  // "수정" 모드로 전환하는 함수
  function editTodoMode(todo) {
    todoForm.todoTitle.value = todo.title;
    todoForm.todoDate.value = todo.date;
    todoForm.priority.value = todo.priority;
    todoForm.todoKey.value = todo.keyword_id;

    // 기존 내용은 TodoContent에 맞게 추가 (여기서 예시로 하나만 처리)
    const todoContentInputs = [
      ...todoForm.querySelectorAll('.todo_content input[name="todoCon"]'),
    ];
    todoContents.forEach((content, index) => {
      if (todoContentInputs[index]) {
        todoContentInputs[index].value = content;
      }
    });

    // 수정 버튼 보이기, 등록 버튼 숨기기
    todoSubmitBtn.style.display = 'none'; // 등록 버튼 숨기기
    todoEditBtn.style.display = 'inline-block'; // 수정 버튼 보이기
  }
</script>
