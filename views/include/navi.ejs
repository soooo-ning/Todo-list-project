<head>
  <script
    defer
    src="https://kit.fontawesome.com/1a37f47d3b.js"
    crossorigin="anonymous"
  ></script>
</head>

<div class="sidebar">
  <a href="/todo/dashboard"
    ><img
      src="/static/img/home.png"
      alt="홈으로 가기"
      width="18px"
      height="18px"
  /></a>
  <button type="button" class="navi_close">네비</button>
  <div class="profile">
    <img
      src="<%= locals.profile_img ? '/static/uploads/' + locals.profile_img : '/static/img/26139_img.png' %>"
      class="profile-img"
      width="100"
      height="100"
    />
    <p><b><%=locals.nickname%></b> 님 환영합니다!</p>
    <div class="navi logoutBtn">
      <a href="/user/profile"><i class="fa-solid fa-gear"></i> 프로필 설정</a>
      <a href="/" onclick="return confirm('로그아웃을 하시나요?')"
        ><i class="fa-solid fa-right-from-bracket"></i> logout</a
      >
    </div>
  </div>
  <div class="naviBar">
    <input type="search" id="search-comment" placeholder="search.." />
    <p>TODO리스트</p>
    <a href="/todo/api/calendar"
      ><i class="fa-regular fa-calendar-check"></i> 캘린더</a
    ><br />
    <a href="/todo/api/deleted-todo"
      ><i class="fa-solid fa-trash"></i> 휴지통</a
    >

    <div class="displaybox">
      <button class="btn btn-dark" id="theme-toggle">
        <i class="fa-regular fa-moon"></i> 다크모드
      </button>
    </div>
  </div>
  <div class="keyBar">
    <div class="keybarTitle">
      <h3>키워드</h3>
      <button type="button" class="plusKeywordBtn">
        <img src="/static/img/plus.png" alt="키워드추가" />
      </button>
    </div>
    <ul id="keyul">
      <% for (let i = 0; i < locals.keywords.length; i++) { %>
      <li>
        <div class="keybarDiv">
          <a href="/todo/api/list/keyword/<%= locals.keywords[i].id %>">
            <i class="fa-solid fa-hashtag"></i> <%= locals.keywords[i].keyword
            %>
          </a>
          <button type="button" class="minusKeywordBtn">
            <img
              src="/static/img/minus.png"
              alt="키워드삭제"
              id="deleteKeywordBtn"
            />
          </button>
        </div>
      </li>
      <% } %>
    </ul>
  </div>
  <button type="button" class="pop_btn">할일 등록하기</button>
</div>

<script>
  /* 네비 */
  const themeToggle = document.getElementById('theme-toggle');
  const sidebar = document.querySelector('.sidebar');
  const body = document.body;

  document.addEventListener('DOMContentLoaded', () => {
    const isDarkMode = localStorage.getItem('dark-mode') === 'true';
    sidebar.classList.toggle('dark-mode', isDarkMode);
    if (isDarkMode) {
      body.classList.add('dark-mode');
      themeToggle.innerHTML = `<i class="fa-regular fa-sun"></i> 라이트모드`;
      themeToggle.classList.remove('btn-light');
      themeToggle.classList.add('btn-dark');
    }
  });

  themeToggle.addEventListener('click', () => {
    // body의 dark-mode 클래스를 토글
    const isDarkMode = document.body.classList.toggle('dark-mode');
    // 사이드바의 dark-mode 클래스를 토글
    sidebar.classList.toggle('dark-mode', isDarkMode); // 다크 모드일 때 사이드바에 dark-mode 클래스를 추가
    // 버튼의 아이콘과 텍스트를 바꿈
    localStorage.setItem('dark-mode', isDarkMode);
    if (isDarkMode) {
      themeToggle.innerHTML = `<i class="fa-regular fa-sun"></i> 라이트모드`; // 다크모드일 때
      themeToggle.classList.remove('btn-light');
      themeToggle.classList.add('btn-dark');
    } else {
      themeToggle.innerHTML = `<i class="fa-regular fa-moon"></i> 다크모드`; // 라이트모드일 때
      themeToggle.classList.remove('btn-dark');
      themeToggle.classList.add('btn-light');
    }
  });

  document.addEventListener('DOMContentLoaded', function () {
    /*네비메뉴 버튼 추가*/
    const naviBtn = document.createElement('button');
    const naviContainer = document.querySelector('main.container');
    naviBtn.classList.add('navi_btn');
    naviBtn.innerText = 'MENU';
    naviContainer.prepend(naviBtn);
    /* //네비메뉴 버튼 추가*/

    const nav = document.querySelector('.nav');
    const naviClose = document.querySelector('.navi_close');
    naviBtn.addEventListener('click', () => {
      nav.classList.add('on');
      document.querySelector('body').classList.add('pop_open');
    });
    naviClose.addEventListener('click', () => {
      nav.classList.remove('on');
      document.querySelector('body').classList.remove('pop_open');
    });
  });

  document
    .querySelector('.plusKeywordBtn')
    .addEventListener('click', function () {
      // keybarTitle 요소 선택
      const keybarTitle = document.querySelector('.keybarTitle');

      // 이미 input이 생성되어 있는지 확인
      if (document.querySelector('.newKeywordInput')) {
        alert('이미 입력창이 생성되었습니다.');
        return;
      }

      // 새로운 input 요소 생성
      const input = document.createElement('input');
      input.type = 'text';
      input.placeholder = '키워드를 입력하세요';
      input.className = 'newKeywordInput';

      // keybarTitle의 형제로 input 추가
      keybarTitle.parentNode.insertBefore(input, keybarTitle.nextSibling);

      // 엔터 키 입력 시 키워드 추가
      input.addEventListener('keypress', function (event) {
        if (event.key === 'Enter' && input.value.trim()) {
          const ul = document.getElementById('keyul');
          const inputValue = input.value.trim(); // 사용자 입력 값

          // 기존 키워드 텍스트만 추출 (앞뒤 공백 제거 후 소문자로 통일)
          const existingKeywords = Array.from(ul.querySelectorAll('a')).map(
            (a) => a.textContent.trim(),
          );
          console.log(existingKeywords);
          // 중복 여부 확인
          for (let i = 0; i < existingKeywords.length; i++) {
            if (existingKeywords[i] === inputValue) {
              alert('이미 존재하는 키워드입니다.');
              input.remove();
              return;
            }
          }

          // `user_id`는 로컬 변수로 받아와야 합니다. (예: locals.userId)
          const userId = `<%= locals.userId %>`; // 이 값은 서버에서 제공해야 합니다.

          // Axios를 사용하여 POST 요청 보내기
          axios
            .post('/keyword/api/create', {
              user_id: userId,
              keyword: inputValue,
            })
            .then((response) => {
              // 성공적으로 추가되면 새 키워드를 리스트에 추가
              const li = document.createElement('li');
              const a = document.createElement('a');
              a.href = `/todo/api/list/keyword?keyword=${encodeURIComponent(
                inputValue,
              )}`;
              a.innerHTML = `<i class="fa-solid fa-hashtag"></i> ${inputValue}`;
              li.appendChild(a);
              ul.appendChild(li);

              // 입력창 제거
              input.remove();
              alert('키워드가 성공적으로 추가되었습니다!');
              window.location.reload();
            })
            .catch((error) => {
              console.error('키워드 추가 오류:', error);
              alert('키워드 추가에 실패했습니다. 다시 시도해주세요.');
            });
        }
      });
    });

  // document.getElementById("deleteKeywordBtn").addEventListener("")
  document.querySelectorAll('.minusKeywordBtn').forEach((button) => {
    button.addEventListener('click', function () {
      // 부모 div(.keybarDiv) 요소 찾기
      const keybarDiv = this.closest('.keybarDiv');

      // 키워드 ID 추출 (a 태그의 href 속성에서 ID를 추출)
      const keywordId = keybarDiv.querySelector('a').href.split('/').pop();

      if (!keywordId) {
        alert('키워드 ID를 찾을 수 없습니다.');
        return;
      }
      const confirmDelete = confirm('정말 이 키워드를 삭제하시겠습니까?');
      if (!confirmDelete) return;
      // API 호출
      axios({
        method: 'delete',
        url: '/keyword/api/delete',
        data: { id: keywordId }, // ID 전달
      })
        .then((response) => {
          console.log(response.data.message); // 성공 메시지 확인
          alert('키워드가 삭제되었습니다.');

          // 삭제 완료 후 해당 div 제거
          keybarDiv.remove();
        })
        .catch((error) => {
          console.error('키워드 삭제 오류:', error);
          alert('키워드 삭제에 실패했습니다.');
        });
    });
  });
</script>
