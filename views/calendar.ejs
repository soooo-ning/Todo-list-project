<!DOCTYPE html>
<html lang="en">
  <%- include('include/header', { title: 'calendar' })%>
  <body>
    <!-- 네비게이션 부분 -->
    <nav class="nav"><%- include('include/navi') %></nav>

    <main class="container">
      <div class="content">
        <div class="calendar">
          <div class="header">
            <button id="prevMonth">&lt;</button>
            <h2 id="monthYear"></h2>
            <button id="nextMonth">&gt;</button>
          </div>
          <div class="days">
            <div>일</div>
            <div>월</div>
            <div>화</div>
            <div>수</div>
            <div>목</div>
            <div>금</div>
            <div>토</div>
          </div>
          <div class="dates" id="dates"></div>
        </div>

        <div class="todo-list">
          <h2>스케줄:</h2>
          <h3 id="selected-date"></h3>
          <ul id="todo-items"></ul>
        </div>
      </div>
    </main>

    <%- include('include/popup') %>

    <script>
      const monthYear = document.getElementById('monthYear');
      const datesContainer = document.getElementById('dates');
      const prevMonth = document.getElementById('prevMonth');
      const nextMonth = document.getElementById('nextMonth');

      let currentDate = new Date();

      // 날짜에 투두리스트 데이터를 API에서 가져오기
      async function fetchTodoData(dateKey) {
        // try {
        //   const response = await fetch(`/todo/api/calendar?date=${dateKey}`);
        //   if (!response.ok) {
        //     throw new Error('Failed to fetch todo data');
        //   }
        //   const data = await response.json();
        //   return data.todoItems || [];
        // } catch (error) {
        //   console.error(error);
        //   return [];
        // }

        // 투두리스트 DB 예시
        const mockApiResponse = {
          '2024-12-10': ['회의 준비', '서류 정리'],
          '2024-12-11': ['프로젝트 발표 준비', '코드 리뷰'],
          '2024-12-15': ['팀 회의', '미팅'],
          '2024-12-21': ['발표'],
        };
        return mockApiResponse[dateKey] || [];
      }

      // 달력 렌더링
      async function renderCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        monthYear.textContent = `${currentDate.toLocaleString('default', {
          month: 'long',
        })} ${year}`;

        const firstDay = new Date(year, month, 1).getDay();
        const lastDate = new Date(year, month + 1, 0).getDate();

        datesContainer.innerHTML = '';

        for (let i = 0; i < firstDay; i++) {
          const emptyDiv = document.createElement('div');
          datesContainer.appendChild(emptyDiv);
        }

        for (let i = 1; i <= lastDate; i++) {
          const dateDiv = document.createElement('div');
          dateDiv.classList.add('date');
          dateDiv.textContent = i;
          dateDiv.addEventListener('click', () =>
            selectDate(year, month + 1, i),
          );
          const dateKey = `${year}-${month + 1}-${i}`;
          const items = await fetchTodoData(dateKey); // 날짜의 투두리스트 데이터 가져오기

          // 투두리스트가 있으면 날짜 색 변경
          if (items.length > 0) {
            dateDiv.style.backgroundColor = '#e7c6ff';
          }
          datesContainer.appendChild(dateDiv);
        }
      }

      prevMonth.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
      });

      nextMonth.addEventListener('click', () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
      });

      // 날짜 클릭 시 해당 날짜의 투두리스트 보여주기
      async function selectDate(year, month, day) {
        const selectedDate = `${year}년 ${month}월 ${day}일`;
        document.getElementById('selected-date').textContent = selectedDate;

        const todoItems = document.getElementById('todo-items');
        todoItems.innerHTML = '';

        const dateKey = `${year}-${month}-${day}`;
        const items = await fetchTodoData(dateKey); // 선택된 날짜의 투두리스트 가져오기

        const dateDivs = document.querySelectorAll('.date');
        dateDivs.forEach((dateDiv) => {
          const dateText = dateDiv.textContent;
          if (parseInt(dateText) === day) {
            if (items.length > 0) {
              dateDiv.style.backgroundColor = '#e7c6ff';
            } else {
              dateDiv.style.backgroundColor = ''; // 투두가 없으면 원래 색상으로 되돌리기
            }
          }
        });

        items.forEach((item) => {
          const li = document.createElement('li');
          li.textContent = item;
          todoItems.appendChild(li);
        });
      }

      renderCalendar();
    </script>
  </body>
</html>
