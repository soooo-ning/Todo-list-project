<div class="container popup detail-popup">
  <div class="pop_con">
    <h3 class="sub_title">
      <span>Todo Detail</span>
    </h3>
    <button type="button" class="pop_close">X</button>
    <form name="form-todo-detail" method="post">
      <label class="todo_title">
        <input
          type="text"
          name="todoTitle"
          placeholder="제목을 입력하세요"
          required
          disabled
        />
      </label>

      <div class="todo_input">
        <label class="calendar_input">
          <input
            type="text"
            id="detail-datetime-input"
            name="todoDate"
            placeholder="날짜를 입력하세요"
            readonly
            disabled
          />
        </label>

        <div class="priority">
          <p>우선순위</p>
          <label>
            <input type="radio" name="priority" value="high" disabled />
            상
          </label>
          <label>
            <input type="radio" name="priority" value="medium" disabled />
            중
          </label>
          <label>
            <input type="radio" name="priority" value="low" disabled />
            하
          </label>
        </div>

        <label class="todo_key">
          <p>키워드</p>
          <select name="todoKey" disabled>
            <% if (keywords && keywords.length > 0) { %> <% for (let i = 0; i <
            keywords.length; i++) { %>
            <option value="<%= keywords[i].id %>">
              <%= keywords[i].keyword %>
            </option>
            <% } %> <% } else { %>
            <option value="">No Keywords Available</option>
            <% } %>
          </select>
        </label>
      </div>

      <ul class="todo_content"></ul>

      <div class="todo-content-controls">
        <button type="button" id="addContentBtn" style="display: none">
          추가
        </button>
      </div>

      <div class="button-group">
        <button type="button" id="todoEdit">수정</button>
        <button type="submit" id="todoSubmit" style="display: none">
          등록
        </button>
        <button type="button" id="todoDelete">삭제</button>
      </div>
    </form>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    let currentTodoId = null;
    const detailPopup = document.querySelector('.detail-popup');
    const detailForm = document.forms['form-todo-detail'];
    const todoEditBtn = document.getElementById('todoEdit');
    const todoSubmitBtn = document.getElementById('todoSubmit');
    const todoDeleteBtn = document.getElementById('todoDelete');
    const addContentBtn = document.getElementById('addContentBtn');

    // Todo 상세 정보 로드 함수
    async function loadTodoDetail(todoId) {
      try {
        showLoading();
        const response = await axios.get(`/todo/api/detail/${todoId}`);
        currentTodoId = todoId;
        populateForm(response.data);
      } catch (error) {
        handleError('Todo 정보를 불러오는데 실패했습니다.', error);
      } finally {
        hideLoading();
      }
    }

    // 폼에 데이터 채우기
    function populateForm(data) {
      if (!detailForm) return;

      const titleInput = detailForm.querySelector('[name="todoTitle"]');
      const dateInput = detailForm.querySelector('[name="todoDate"]');
      const priorityInput = detailForm.querySelector(
        `[name="priority"][value="${data.priority}"]`,
      );
      const keywordSelect = detailForm.querySelector('[name="todoKey"]');

      if (titleInput) titleInput.value = data.title || '';
      if (dateInput) dateInput.value = data.date || '';
      if (priorityInput) priorityInput.checked = true;
      if (keywordSelect) keywordSelect.value = data.keyword_id || '';

      const todoContentList = detailForm.querySelector('.todo_content');
      if (todoContentList) {
        todoContentList.innerHTML = '';
        if (data.todo_contents && data.todo_contents.length > 0) {
          data.todo_contents.forEach((content) => {
            addContentItem(content);
          });
        } else {
          addContentItem();
        }
      }
    }

    // 내용 항목 추가 함수
    function addContentItem(content = { id: null, content: '', state: false }) {
      const todoContentList = detailForm.querySelector('.todo_content');
      if (!todoContentList) return;

      const li = document.createElement('li');
      li.dataset.contentId = content.id || '';
      li.innerHTML = `
      <label>
        <input type="checkbox" name="todoChk" ${
          content.state ? 'checked' : ''
        } disabled>
        <input type="text" name="todoCon" value="${escapeHtml(
          content.content || '',
        )}" placeholder="할일을 입력하세요" disabled>
        <input type="button" class="delete-content" value="delete" style="display: none">
      </label>
    `;
      todoContentList.appendChild(li);

      const deleteBtn = li.querySelector('.delete-content');
      if (deleteBtn) {
        deleteBtn.addEventListener('click', () => {
          if (todoContentList.children.length > 1) {
            li.remove();
            updateDeleteButtons();
          } else {
            alert('최소 하나의 내용 항목이 필요합니다.');
          }
        });
      }
    }

    // 팝업 열기
    window.openTodoDetail = function (todoId) {
      loadTodoDetail(todoId);
      if (detailPopup) {
        detailPopup.classList.add('on');
        document.querySelector('body')?.classList.add('pop_open');
      }
    };

    // 팝업 닫기 버튼 이벤트
    const detailPopClose = detailPopup?.querySelector('.pop_close');
    if (detailPopClose) {
      detailPopClose.addEventListener('click', () => {
        detailPopup.classList.remove('on');
        document.querySelector('body')?.classList.remove('pop_open');
        resetDetailForm();
      });
    }

    // 폼 초기화
    function resetDetailForm() {
      if (!detailForm) return;

      detailForm.reset();
      currentTodoId = null;
      const todoContentList = detailForm.querySelector('.todo_content');
      if (todoContentList) todoContentList.innerHTML = '';

      enableFormEditing(false);

      if (todoEditBtn) todoEditBtn.style.display = 'inline-block';
      if (todoSubmitBtn) todoSubmitBtn.style.display = 'none';
      if (addContentBtn) addContentBtn.style.display = 'none';

      hideDeleteButtons();
    }

    // 폼 수정 가능/불가능 토글
    function enableFormEditing(enabled) {
      if (!detailForm) return;

      const formElements = detailForm.elements;
      if (formElements) {
        for (let element of formElements) {
          if (element.type !== 'button' && element.type !== 'submit') {
            element.disabled = !enabled;
          }
        }
      }

      const todoContentList = detailForm.querySelector('.todo_content');
      if (todoContentList) {
        const contentItems = todoContentList.querySelectorAll('li');
        contentItems.forEach((item) => {
          if (!item) return;

          const checkbox = item.querySelector('input[type="checkbox"]');
          const textInput = item.querySelector('input[name="todoCon"]');
          const deleteButton = item.querySelector('.delete-content');

          if (checkbox) checkbox.disabled = !enabled;
          if (textInput) textInput.disabled = !enabled;
          if (deleteButton)
            deleteButton.style.display = enabled ? 'inline-block' : 'none';
        });
      }

      if (addContentBtn)
        addContentBtn.style.display = enabled ? 'inline-block' : 'none';
    }

    // 삭제 버튼 숨기기
    function hideDeleteButtons() {
      const deleteButtons = detailForm?.querySelectorAll('.delete-content');
      deleteButtons?.forEach((btn) => {
        btn.style.display = 'none';
      });
    }

    // XSS 방지를 위한 HTML 이스케이프
    function escapeHtml(unsafe) {
      return unsafe
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
    }

    // 로딩 표시 함수
    function showLoading() {
      if (!detailPopup) return;

      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'loading';
      loadingDiv.innerHTML = '로딩 중...';
      detailPopup.appendChild(loadingDiv);
    }

    function hideLoading() {
      const loadingDiv = detailPopup?.querySelector('.loading');
      if (loadingDiv) loadingDiv.remove();
    }

    // 에러 처리 함수
    function handleError(message, error) {
      console.error(message, error);
      alert(message);
    }

    // 수정 버튼 클릭 이벤트
    if (todoEditBtn) {
      todoEditBtn.addEventListener('click', () => {
        enableFormEditing(true);

        if (todoEditBtn) todoEditBtn.style.display = 'none';
        if (todoSubmitBtn) todoSubmitBtn.style.display = 'inline-block';
      });
    }

    // 삭제 버튼 클릭 이벤트
    if (todoDeleteBtn) {
      todoDeleteBtn.addEventListener('click', () => {
        if (confirm('정말 삭제하시겠습니까?')) {
          // 삭제 로직
          axios
            .delete(`/todo/api/delete/${currentTodoId}`)
            .then(() => {
              alert('삭제되었습니다.');
              resetDetailForm();
            })
            .catch((error) => {
              alert('삭제에 실패했습니다.');
              console.error(error);
            });
        }
      });
    }

    // 내용 추가 버튼 클릭 이벤트
    if (addContentBtn) {
      addContentBtn.addEventListener('click', () => {
        addContentItem();
      });
    }

    // 수정 등록 버튼 클릭 이벤트
    if (todoSubmitBtn) {
      todoSubmitBtn.addEventListener('click', async (event) => {
        event.preventDefault();

        // 폼 데이터 가져오기
        const todoTitle = detailForm
          .querySelector("input[name='todoTitle']")
          .value.trim();
        const todoDate = detailForm
          .querySelector("input[name='todoDate']")
          .value.trim();
        const todoPriorityElem = detailForm.querySelector(
          "input[name='priority']:checked",
        );
        const todoKey =
          detailForm.querySelector("select[name='todoKey']").value || null;

        // 폼 검증
        if (!todoTitle) {
          alert('제목을 입력해주세요.');
          return;
        }
        if (!todoDate) {
          alert('날짜를 선택해주세요.');
          return;
        }
        if (!todoPriorityElem) {
          alert('우선순위를 선택해주세요.');
          return;
        }

        // API 요청 데이터 구성
        const formData = {
          keyword_id: todoKey,
          title: todoTitle,
          priority: todoPriorityElem.value,
          date: todoDate,
          content: Array.from(
            detailForm.querySelectorAll('.todo_content input[name="todoCon"]'),
          )
            .map((input) => input.value.trim())
            .filter((content) => content !== ''),
        };

        try {
          const response = await axios.put(
            `/todo/api/update/${currentTodoId}`,
            formData,
          );
          alert('Todo가 성공적으로 수정되었습니다.');
          detailPopup.classList.remove('on');
          document.querySelector('body').classList.remove('pop_open');
          window.location.reload();
        } catch (error) {
          console.error('Todo 수정 실패:', error);
          alert('Todo 수정 중 오류가 발생했습니다.');
        }
      });
    }

    // 초기 상태 설정
    updateDeleteButtons();
  });
</script>
