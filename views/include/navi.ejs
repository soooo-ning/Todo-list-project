<head>
  <script
    defer
    src="https://kit.fontawesome.com/1a37f47d3b.js"
    crossorigin="anonymous"
  ></script>
</head>

<div class="sidebar">
  <a href="/todo/dashboard"
    ><img
      src="/static/img/home.png"
      alt="홈으로 가기"
      width="18px"
      height="18px"
    />Todo Checkk</a
  >
  <button type="button" class="navi_close">네비</button>
  <div class="profile">
    <img
      src="<%= locals.profile_img ? '/static/uploads/' + locals.profile_img : '/static/img/default.jpg' %>"
      class="profile-img"
      width="100"
      height="100"
    />
    <p><b><%=locals.nickname%></b> 님 환영합니다!</p>
    <div class="navi logoutBtn">
      <a href="/user/profile"><i class="fa-solid fa-gear"></i> 프로필 설정</a>
      <a href="/" onclick="logoutBtn(event)"
        ><i class="fa-solid fa-right-from-bracket"></i> logout</a
      >
    </div>
  </div>
  <div class="naviBar">
    <div class="search-container">
      <input type="search" id="search-comment" placeholder="search.." />
      <button type="button" id="nav-search-btn">
        <i class="fa-solid fa-magnifying-glass"></i>
      </button>
    </div>
    <p>TODO리스트</p>
    <a href="/todo/calendar"
      ><i class="fa-regular fa-calendar-check"></i> 캘린더</a
    ><br />
    <a href="/todo/api/deleted-todo"
      ><i class="fa-solid fa-trash"></i> 휴지통</a
    >

    <div class="displaybox">
      <button class="btn btn-dark" id="theme-toggle">
        <i class="fa-regular fa-moon"></i> 다크모드
      </button>
    </div>
  </div>
  <div class="keyBar">
    <div class="keybarTitle">
      <h3>키워드</h3>
      <button type="button" class="plusKeywordBtn">
        <i class="fa-solid fa-plus"></i>
        <!-- <img src="/static/img/plus.png" alt="키워드추가" /> -->
      </button>
    </div>
    <div class="newkeyTitle-none" id="newKeyTitle">
      <input
        type="text"
        id="new-keyword-input"
        class="newKeywordInput"
        placeholder="추가할 키워드를 입력하세요"
      />
      <button type="button" class="newkeyTitle-btn">
        <i class="fa-regular fa-square-plus" style="font-size: 20px"></i>
      </button>
    </div>
    <ul id="keyul">
      <% for (let i = 0; i < locals.keywords.length; i++) { %>
      <li>
        <div class="keybarDiv">
          <a href="/todo/api/keyword/<%= locals.keywords[i].id %>">
            <i class="fa-solid fa-hashtag"></i> <%= locals.keywords[i].keyword
            %>
          </a>
          <button type="button" class="minusKeywordBtn">
            <i class="fa-solid fa-minus"></i>
            <!-- <img
              src="/static/img/minus.png"
              alt="키워드삭제"
              id="deleteKeywordBtn"
            /> -->
          </button>
        </div>
      </li>
      <% } %>
    </ul>
  </div>
  <button type="button" class="pop_btn">할일 등록하기</button>
</div>

<script>
  /* 네비 */
  const themeToggle = document.getElementById('theme-toggle');
  const sidebar = document.querySelector('.sidebar');
  const body = document.body;

  document.addEventListener('DOMContentLoaded', () => {
    const isDarkMode = localStorage.getItem('dark-mode') === 'true';
    sidebar.classList.toggle('dark-mode', isDarkMode);
    if (isDarkMode) {
      body.classList.add('dark-mode');
      themeToggle.innerHTML = `<i class="fa-regular fa-sun"></i> 라이트모드`;
      themeToggle.classList.remove('btn-light');
      themeToggle.classList.add('btn-dark');
    }

    // 검색 기능 추가
    const searchInput = document.getElementById('search-comment');
    const searchBtn = document.getElementById('nav-search-btn');

    function performSearch() {
      const query = searchInput.value.trim();
      if (query) {
        window.location.href = `/todo/search?query=${encodeURIComponent(
          query,
        )}`;
      } else {
        alert('검색어를 입력해주세요.');
      }
    }

    // 검색 버튼 클릭 이벤트
    searchBtn && searchBtn.addEventListener('click', performSearch);

    // 엔터키 이벤트
    searchInput &&
      searchInput.addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          performSearch();
        }
      });
  });

  themeToggle.addEventListener('click', () => {
    // body의 dark-mode 클래스를 토글
    const isDarkMode = document.body.classList.toggle('dark-mode');
    // 사이드바의 dark-mode 클래스를 토글
    sidebar.classList.toggle('dark-mode', isDarkMode); // 다크 모드일 때 사이드바에 dark-mode 클래스를 추가
    // 버튼의 아이콘과 텍스트를 바꿈
    localStorage.setItem('dark-mode', isDarkMode);
    if (isDarkMode) {
      themeToggle.innerHTML = `<i class="fa-regular fa-sun"></i> 라이트모드`; // 다크모드일 때
      themeToggle.classList.remove('btn-light');
      themeToggle.classList.add('btn-dark');
    } else {
      themeToggle.innerHTML = `<i class="fa-regular fa-moon"></i> 다크모드`; // 라이트모드일 때
      themeToggle.classList.remove('btn-dark');
      themeToggle.classList.add('btn-light');
    }
  });

  document.addEventListener('DOMContentLoaded', function () {
    /*네비메뉴 버튼 추가*/
    const naviBtn = document.createElement('button');
    const naviContainer = document.querySelector('main.container');
    naviBtn.classList.add('navi_btn');
    naviBtn.innerText = 'MENU';
    naviContainer.prepend(naviBtn);
    /* //네비메뉴 버튼 추가*/

    const nav = document.querySelector('.nav');
    const naviClose = document.querySelector('.navi_close');
    naviBtn.addEventListener('click', () => {
      nav.classList.add('on');
      document.querySelector('body').classList.add('pop_open');
    });
    naviClose.addEventListener('click', () => {
      nav.classList.remove('on');
      document.querySelector('body').classList.remove('pop_open');
    });
  });

  document
    .querySelector('.plusKeywordBtn')
    .addEventListener('click', function () {
      const newKeywordInput = document.getElementById('new-keyword-input');
      const newKeyTitle = document.getElementById('newKeyTitle');

      // 이미 입력창이 보이는 상태라면 중복 실행 방지
      if (!newKeyTitle.classList.contains('newkeyTitle-none')) {
        alert('이미 입력창이 활성화되어 있습니다.');
        return;
      }

      // 입력창 보이게 만들기
      newKeyTitle.classList.remove('newkeyTitle-none');
      newKeyTitle.classList.add('newkeyTitle');

      // 키워드 추가 로직
      const addKeyword = () => {
        const inputValue = newKeywordInput.value.trim(); // 입력된 키워드
        if (!inputValue) {
          alert('키워드를 입력해주세요.');
          return;
        }

        const ul = document.getElementById('keyul');
        const existingKeywords = Array.from(ul.querySelectorAll('a')).map((a) =>
          a.textContent.trim(),
        );

        // 중복 확인
        if (existingKeywords.includes(inputValue)) {
          alert('이미 존재하는 키워드입니다.');
          return;
        }

        const userId = `<%= locals.userId %>`; // 서버에서 제공되는 사용자 ID

        // 키워드 생성 요청
        axios
          .post('/keyword/api/create', {
            user_id: userId,
            keyword: inputValue,
          })
          .then((response) => {
            // 성공적으로 추가되면 리스트에 반영
            const li = document.createElement('li');
            const a = document.createElement('a');
            a.href = `/todo/api/keyword?keyword=${encodeURIComponent(
              inputValue,
            )}`;
            a.innerHTML = `<i class="fa-solid fa-hashtag"></i> ${inputValue}`;
            li.appendChild(a);
            ul.appendChild(li);

            alert('키워드가 성공적으로 추가되었습니다!');

            // 입력창 숨기기 및 초기화
            newKeywordInput.value = '';
            newKeyTitle.classList.remove('newkeyTitle');
            newKeyTitle.classList.add('newkeyTitle-none');

            // 페이지 리로드
            window.location.reload();
          })
          .catch((error) => {
            console.error('키워드 추가 오류:', error);
            alert('키워드 추가에 실패했습니다. 다시 시도해주세요.');
          });
      };

      // 추가 버튼 클릭 시 키워드 생성
      document.querySelector('.newkeyTitle-btn').onclick = addKeyword;

      // 엔터 키 입력 시 키워드 생성
      newKeywordInput.addEventListener('keypress', function (event) {
        if (event.key === 'Enter') {
          addKeyword();
        }
      });
    });

  // document.getElementById("deleteKeywordBtn").addEventListener("")
  document.querySelectorAll('.minusKeywordBtn').forEach((button) => {
    button.addEventListener('click', function () {
      // 부모 div(.keybarDiv) 요소 찾기
      const keybarDiv = this.closest('.keybarDiv');

      // 키워드 ID 추출 (a 태그의 href 속성에서 ID를 추출)
      const keywordId = keybarDiv.querySelector('a').href.split('/').pop();

      if (!keywordId) {
        alert('키워드 ID를 찾을 수 없습니다.');
        return;
      }
      const confirmDelete = confirm('정말 이 키워드를 삭제하시겠습니까?');
      if (!confirmDelete) return;
      // API 호출
      axios({
        method: 'delete',
        url: '/keyword/api/delete',
        data: { id: keywordId }, // ID 전달
      })
        .then((response) => {
          console.log(response.data.message); // 성공 메시지 확인
          alert('키워드가 삭제되었습니다.');

          // 삭제 완료 후 해당 div 제거
          keybarDiv.remove();
        })
        .catch((error) => {
          console.error('키워드 삭제 오류:', error);
          alert('키워드 삭제에 실패했습니다.');
        });
    });
  });

  function logoutBtn(event) {
    event.preventDefault();

    // 1. JWT 토큰 삭제 (localStorage에 저장된 토큰이 있을 경우)
    localStorage.removeItem('token');
    localStorage.removeItem('nickname'); // userId가 localStorage에 있을 경우 삭제

    // 2. 서버에 로그아웃 요청 (세션 삭제 요청)
    axios
      .post('/user/api/logout')
      .then((response) => {
        // 로그아웃 후 리디렉션
        window.location.href = '/'; // 로그아웃 후 홈으로 리디렉션
      })
      .catch((error) => {
        console.error('로그아웃 중 오류가 발생했습니다.', error);
      });
  }
</script>
